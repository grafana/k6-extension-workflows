name: Validate

on:
  workflow_call:
    inputs:
      go-versions:
        description: Go versions to use for testing and building
        type: string
        required: false
        default: '["1.22.x", "1.21.x"]'
      platforms:
        description: Target platforms to use for testing and building
        type: string
        required: false
        default: '["ubuntu-latest", "windows-latest", "macos-latest"]'
      passing-grade:
        description: Passing compliance grade
        type: string
        required: false
        default: C
      public:
        description: Static content directory for GitHub Pages
        type: string
        required: false
        default: public

    secrets:
      CODECOV_TOKEN:
        description: Token for codecov.io
        required: false

jobs:
  config:
    name: Config
    runs-on: ubuntu-latest
    outputs:
      k6-versions: ${{steps.k6-versions.outputs.versions}}
      go-version: ${{steps.go-version.outputs.version}}
      codecov: ${{steps.codecov.outputs.enabled}}
      api-doc: ${{steps.api-doc.outputs.enabled}}
    env:
      CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Retrieve k6 versions to test
        id: k6-versions
        uses: grafana/k6-extension-actions/k6-versions-to-test@v0.1.0
      - name: Retrieve go version to test
        id: go-version
        shell: bash
        run: echo "version=$(echo '${{inputs.go-versions}}' | jq -r '.[0]')" >> $GITHUB_OUTPUT
      - name: Check secrets.CODECOV_TOKEN
        id: codecov
        shell: bash
        run: |
          if test ! -z "${{env.CODECOV_TOKEN}}"; then
            echo "enabled=true" >> $GITHUB_OUTPUT
          fi
      - name: Check for TypeScript API declaration
        id: api-doc
        if: ${{ hashFiles('index.d.ts') != '' && (hashFiles('tsconfig.json') != '' || hashFiles('typedoc.json') != '') }}
        run: |
          echo "enabled=true" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs:
      - config
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{needs.config.outputs.go-version}}
        uses: actions/setup-go@v5
        with:
          go-version: ${{needs.config.outputs.go-version}}

      - name: Check module dependencies
        shell: bash
        run: |
          go version
          test -z "$(go mod tidy && git status go.* --porcelain)"
          go mod verify

      - name: Retrieve golangci-lint version
        uses: grafana/k6-extension-actions/golangci-lint-version@v0.1.0
        id: golangci-lint-version

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: ${{ steps.golangci-lint-version.outputs.version }}
          only-new-issues: true

      - name: Generate Go Report Card
        if: ${{ github.ref_name == 'main' || github.ref_name == 'master' }}
        uses: creekorful/goreportcard-action@v1.0

  trial:
    name: Trial
    needs:
      - config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.config.outputs.go-version }}

      - name: Run tests
        run: |
          go test -short -timeout 60s ./...

  test:
    name: Test
    needs:
      - lint
      - trial
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJSON(inputs.go-versions) }}
        platform: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run tests
        run: |
          go test -race -timeout 60s ./...

  build:
    name: Build
    needs:
      - config
      - trial
      - lint
    strategy:
      fail-fast: false
      matrix:
        k6-version: ${{ fromJSON(needs.config.outputs.k6-versions) }}
        go-version: ${{ fromJSON(inputs.go-versions) }}
        platform: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Setup eget
        uses: grafana/k6-extension-actions/setup-eget@v0.1.0

      - name: Setup xk6
        uses: grafana/k6-extension-actions/setup-xk6@v0.1.0

      - name: Build k6
        shell: bash
        run: |
          MODULE=$(go list -f '{{.Module.Path}}')
          xk6 build ${{ matrix.k6-version }} --output ./k6 --with ${MODULE}="."

      - name: Run k6 version
        run: ./k6 version

  compliance:
    name: Compliance
    needs:
      - config
      - trial
      - lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go ${{needs.config.outputs.go-version}}
        uses: actions/setup-go@v5
        with:
          go-version: ${{needs.config.outputs.go-version}}

      - name: Setup eget
        uses: grafana/k6-extension-actions/setup-eget@v0.1.0

      - name: Setup k6lint
        uses: grafana/k6-extension-actions/setup-k6lint@v0.1.0

      - name: Run k6lint
        id: k6lint
        run: |
          k6lint --passing ${{inputs.passing-grade}}

  coverage:
    name: Coverage
    needs:
      - config
      - test
      - build
    if: ${{ (github.ref_name == 'main' || github.ref_name == 'master') && needs.config.outputs.codecov }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{needs.config.outputs.go-version}}
        uses: actions/setup-go@v5
        with:
          go-version: ${{needs.config.outputs.go-version}}

      - name: Test
        run: go test -count 1 -coverprofile=coverage.txt ./...

      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          slug: ${{github.repository}}

      - name: Generate Go Report Card
        uses: creekorful/goreportcard-action@v1.0

  pages:
    name: Pages
    needs:
      - config
    if: ${{ needs.config.outputs.api-doc }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
      pages: write
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install bun
        uses: oven-sh/setup-bun@v2

      - name: Prepare htdocs
        run: mkdir -p ${{runner.temp}}/htdocs

      - name: Generate API doc
        run: |
          if [ -f index.d.ts ]; then
            bun x typedoc --out ${{runner.temp}}/htdocs
            cp index.d.ts ${{runner.temp}}/htdocs/
          fi

      - name: Copy static content
        run: |
          if test -d "${{inputs.public}}"; then
            cp -a ${{inputs.public}}/. ${{runner.temp}}/htdocs/
          fi

      - name: Setup Pages
        if: ${{ github.ref_name == 'main' || github.ref_name == 'master' }}
        uses: actions/configure-pages@v5

      - name: Upload artifact
        if: ${{ github.ref_name == 'main' || github.ref_name == 'master' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{runner.temp}}/htdocs

      - name: Deploy to GitHub Pages
        if: ${{ github.ref_name == 'main' || github.ref_name == 'master' }}
        uses: actions/deploy-pages@v4
